// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockHttpClientInterface creates a new instance of MockHttpClientInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHttpClientInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHttpClientInterface {
	mock := &MockHttpClientInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockHttpClientInterface is an autogenerated mock type for the HttpClientInterface type
type MockHttpClientInterface struct {
	mock.Mock
}

type MockHttpClientInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHttpClientInterface) EXPECT() *MockHttpClientInterface_Expecter {
	return &MockHttpClientInterface_Expecter{mock: &_m.Mock}
}

// Get provides a mock function for the type MockHttpClientInterface
func (_mock *MockHttpClientInterface) Get(ctx context.Context, url string) ([]byte, int, error) {
	ret := _mock.Called(ctx, url)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 []byte
	var r1 int
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]byte, int, error)); ok {
		return returnFunc(ctx, url)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []byte); ok {
		r0 = returnFunc(ctx, url)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) int); ok {
		r1 = returnFunc(ctx, url)
	} else {
		r1 = ret.Get(1).(int)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = returnFunc(ctx, url)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockHttpClientInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockHttpClientInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - url string
func (_e *MockHttpClientInterface_Expecter) Get(ctx interface{}, url interface{}) *MockHttpClientInterface_Get_Call {
	return &MockHttpClientInterface_Get_Call{Call: _e.mock.On("Get", ctx, url)}
}

func (_c *MockHttpClientInterface_Get_Call) Run(run func(ctx context.Context, url string)) *MockHttpClientInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockHttpClientInterface_Get_Call) Return(body []byte, status int, err error) *MockHttpClientInterface_Get_Call {
	_c.Call.Return(body, status, err)
	return _c
}

func (_c *MockHttpClientInterface_Get_Call) RunAndReturn(run func(ctx context.Context, url string) ([]byte, int, error)) *MockHttpClientInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}
