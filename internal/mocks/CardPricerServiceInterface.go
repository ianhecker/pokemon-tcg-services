// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockCardPricerServiceInterface creates a new instance of MockCardPricerServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCardPricerServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCardPricerServiceInterface {
	mock := &MockCardPricerServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCardPricerServiceInterface is an autogenerated mock type for the CardPricerServiceInterface type
type MockCardPricerServiceInterface struct {
	mock.Mock
}

type MockCardPricerServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCardPricerServiceInterface) EXPECT() *MockCardPricerServiceInterface_Expecter {
	return &MockCardPricerServiceInterface_Expecter{mock: &_m.Mock}
}

// Done provides a mock function for the type MockCardPricerServiceInterface
func (_mock *MockCardPricerServiceInterface) Done() <-chan struct{} {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Done")
	}

	var r0 <-chan struct{}
	if returnFunc, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}
	return r0
}

// MockCardPricerServiceInterface_Done_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Done'
type MockCardPricerServiceInterface_Done_Call struct {
	*mock.Call
}

// Done is a helper method to define mock.On call
func (_e *MockCardPricerServiceInterface_Expecter) Done() *MockCardPricerServiceInterface_Done_Call {
	return &MockCardPricerServiceInterface_Done_Call{Call: _e.mock.On("Done")}
}

func (_c *MockCardPricerServiceInterface_Done_Call) Run(run func()) *MockCardPricerServiceInterface_Done_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCardPricerServiceInterface_Done_Call) Return(valCh <-chan struct{}) *MockCardPricerServiceInterface_Done_Call {
	_c.Call.Return(valCh)
	return _c
}

func (_c *MockCardPricerServiceInterface_Done_Call) RunAndReturn(run func() <-chan struct{}) *MockCardPricerServiceInterface_Done_Call {
	_c.Call.Return(run)
	return _c
}

// Err provides a mock function for the type MockCardPricerServiceInterface
func (_mock *MockCardPricerServiceInterface) Err() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Err")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCardPricerServiceInterface_Err_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Err'
type MockCardPricerServiceInterface_Err_Call struct {
	*mock.Call
}

// Err is a helper method to define mock.On call
func (_e *MockCardPricerServiceInterface_Expecter) Err() *MockCardPricerServiceInterface_Err_Call {
	return &MockCardPricerServiceInterface_Err_Call{Call: _e.mock.On("Err")}
}

func (_c *MockCardPricerServiceInterface_Err_Call) Run(run func()) *MockCardPricerServiceInterface_Err_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCardPricerServiceInterface_Err_Call) Return(err error) *MockCardPricerServiceInterface_Err_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCardPricerServiceInterface_Err_Call) RunAndReturn(run func() error) *MockCardPricerServiceInterface_Err_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function for the type MockCardPricerServiceInterface
func (_mock *MockCardPricerServiceInterface) Start(ctx context.Context) func() {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 func()
	if returnFunc, ok := ret.Get(0).(func(context.Context) func()); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(func())
		}
	}
	return r0
}

// MockCardPricerServiceInterface_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockCardPricerServiceInterface_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockCardPricerServiceInterface_Expecter) Start(ctx interface{}) *MockCardPricerServiceInterface_Start_Call {
	return &MockCardPricerServiceInterface_Start_Call{Call: _e.mock.On("Start", ctx)}
}

func (_c *MockCardPricerServiceInterface_Start_Call) Run(run func(ctx context.Context)) *MockCardPricerServiceInterface_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockCardPricerServiceInterface_Start_Call) Return(stop func()) *MockCardPricerServiceInterface_Start_Call {
	_c.Call.Return(stop)
	return _c
}

func (_c *MockCardPricerServiceInterface_Start_Call) RunAndReturn(run func(ctx context.Context) func()) *MockCardPricerServiceInterface_Start_Call {
	_c.Call.Return(run)
	return _c
}
