// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockServiceInterface creates a new instance of MockServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockServiceInterface {
	mock := &MockServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockServiceInterface is an autogenerated mock type for the ServiceInterface type
type MockServiceInterface struct {
	mock.Mock
}

type MockServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockServiceInterface) EXPECT() *MockServiceInterface_Expecter {
	return &MockServiceInterface_Expecter{mock: &_m.Mock}
}

// Start provides a mock function for the type MockServiceInterface
func (_mock *MockServiceInterface) Start(ctx context.Context) {
	_mock.Called(ctx)
	return
}

// MockServiceInterface_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockServiceInterface_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockServiceInterface_Expecter) Start(ctx interface{}) *MockServiceInterface_Start_Call {
	return &MockServiceInterface_Start_Call{Call: _e.mock.On("Start", ctx)}
}

func (_c *MockServiceInterface_Start_Call) Run(run func(ctx context.Context)) *MockServiceInterface_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockServiceInterface_Start_Call) Return() *MockServiceInterface_Start_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServiceInterface_Start_Call) RunAndReturn(run func(ctx context.Context)) *MockServiceInterface_Start_Call {
	_c.Run(run)
	return _c
}

// Stop provides a mock function for the type MockServiceInterface
func (_mock *MockServiceInterface) Stop() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockServiceInterface_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockServiceInterface_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *MockServiceInterface_Expecter) Stop() *MockServiceInterface_Stop_Call {
	return &MockServiceInterface_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *MockServiceInterface_Stop_Call) Run(run func()) *MockServiceInterface_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockServiceInterface_Stop_Call) Return(err error) *MockServiceInterface_Stop_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockServiceInterface_Stop_Call) RunAndReturn(run func() error) *MockServiceInterface_Stop_Call {
	_c.Call.Return(run)
	return _c
}
