// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/ianhecker/pokemon-tcg-services/internal/pokemontcg"
	mock "github.com/stretchr/testify/mock"
)

// NewMockAPIClientInterface creates a new instance of MockAPIClientInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAPIClientInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAPIClientInterface {
	mock := &MockAPIClientInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAPIClientInterface is an autogenerated mock type for the APIClientInterface type
type MockAPIClientInterface struct {
	mock.Mock
}

type MockAPIClientInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAPIClientInterface) EXPECT() *MockAPIClientInterface_Expecter {
	return &MockAPIClientInterface_Expecter{mock: &_m.Mock}
}

// GetPricing provides a mock function for the type MockAPIClientInterface
func (_mock *MockAPIClientInterface) GetPricing(ctx context.Context, card *pokemontcg.Card) error {
	ret := _mock.Called(ctx, card)

	if len(ret) == 0 {
		panic("no return value specified for GetPricing")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *pokemontcg.Card) error); ok {
		r0 = returnFunc(ctx, card)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAPIClientInterface_GetPricing_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPricing'
type MockAPIClientInterface_GetPricing_Call struct {
	*mock.Call
}

// GetPricing is a helper method to define mock.On call
//   - ctx context.Context
//   - card *pokemontcg.Card
func (_e *MockAPIClientInterface_Expecter) GetPricing(ctx interface{}, card interface{}) *MockAPIClientInterface_GetPricing_Call {
	return &MockAPIClientInterface_GetPricing_Call{Call: _e.mock.On("GetPricing", ctx, card)}
}

func (_c *MockAPIClientInterface_GetPricing_Call) Run(run func(ctx context.Context, card *pokemontcg.Card)) *MockAPIClientInterface_GetPricing_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *pokemontcg.Card
		if args[1] != nil {
			arg1 = args[1].(*pokemontcg.Card)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAPIClientInterface_GetPricing_Call) Return(err error) *MockAPIClientInterface_GetPricing_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAPIClientInterface_GetPricing_Call) RunAndReturn(run func(ctx context.Context, card *pokemontcg.Card) error) *MockAPIClientInterface_GetPricing_Call {
	_c.Call.Return(run)
	return _c
}
