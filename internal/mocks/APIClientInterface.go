// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/ianhecker/pokemon-tcg-services/internal/pokemontcgio/v2"
	"github.com/ianhecker/pokemon-tcg-services/internal/retry"
	mock "github.com/stretchr/testify/mock"
)

// NewMockAPIClientInterface creates a new instance of MockAPIClientInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAPIClientInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAPIClientInterface {
	mock := &MockAPIClientInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAPIClientInterface is an autogenerated mock type for the APIClientInterface type
type MockAPIClientInterface struct {
	mock.Mock
}

type MockAPIClientInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAPIClientInterface) EXPECT() *MockAPIClientInterface_Expecter {
	return &MockAPIClientInterface_Expecter{mock: &_m.Mock}
}

// MakeRetryFunc provides a mock function for the type MockAPIClientInterface
func (_mock *MockAPIClientInterface) MakeRetryFunc(url string) (*v2.Result, retry.RetryFunc) {
	ret := _mock.Called(url)

	if len(ret) == 0 {
		panic("no return value specified for MakeRetryFunc")
	}

	var r0 *v2.Result
	var r1 retry.RetryFunc
	if returnFunc, ok := ret.Get(0).(func(string) (*v2.Result, retry.RetryFunc)); ok {
		return returnFunc(url)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *v2.Result); ok {
		r0 = returnFunc(url)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v2.Result)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) retry.RetryFunc); ok {
		r1 = returnFunc(url)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(retry.RetryFunc)
		}
	}
	return r0, r1
}

// MockAPIClientInterface_MakeRetryFunc_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MakeRetryFunc'
type MockAPIClientInterface_MakeRetryFunc_Call struct {
	*mock.Call
}

// MakeRetryFunc is a helper method to define mock.On call
//   - url string
func (_e *MockAPIClientInterface_Expecter) MakeRetryFunc(url interface{}) *MockAPIClientInterface_MakeRetryFunc_Call {
	return &MockAPIClientInterface_MakeRetryFunc_Call{Call: _e.mock.On("MakeRetryFunc", url)}
}

func (_c *MockAPIClientInterface_MakeRetryFunc_Call) Run(run func(url string)) *MockAPIClientInterface_MakeRetryFunc_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockAPIClientInterface_MakeRetryFunc_Call) Return(result *v2.Result, retryFunc retry.RetryFunc) *MockAPIClientInterface_MakeRetryFunc_Call {
	_c.Call.Return(result, retryFunc)
	return _c
}

func (_c *MockAPIClientInterface_MakeRetryFunc_Call) RunAndReturn(run func(url string) (*v2.Result, retry.RetryFunc)) *MockAPIClientInterface_MakeRetryFunc_Call {
	_c.Call.Return(run)
	return _c
}
