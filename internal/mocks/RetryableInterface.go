// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockRetryableInterface creates a new instance of MockRetryableInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRetryableInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRetryableInterface {
	mock := &MockRetryableInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRetryableInterface is an autogenerated mock type for the RetryableInterface type
type MockRetryableInterface struct {
	mock.Mock
}

type MockRetryableInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRetryableInterface) EXPECT() *MockRetryableInterface_Expecter {
	return &MockRetryableInterface_Expecter{mock: &_m.Mock}
}

// RetriesRemaining provides a mock function for the type MockRetryableInterface
func (_mock *MockRetryableInterface) RetriesRemaining() int {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for RetriesRemaining")
	}

	var r0 int
	if returnFunc, ok := ret.Get(0).(func() int); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(int)
	}
	return r0
}

// MockRetryableInterface_RetriesRemaining_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetriesRemaining'
type MockRetryableInterface_RetriesRemaining_Call struct {
	*mock.Call
}

// RetriesRemaining is a helper method to define mock.On call
func (_e *MockRetryableInterface_Expecter) RetriesRemaining() *MockRetryableInterface_RetriesRemaining_Call {
	return &MockRetryableInterface_RetriesRemaining_Call{Call: _e.mock.On("RetriesRemaining")}
}

func (_c *MockRetryableInterface_RetriesRemaining_Call) Run(run func()) *MockRetryableInterface_RetriesRemaining_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRetryableInterface_RetriesRemaining_Call) Return(n int) *MockRetryableInterface_RetriesRemaining_Call {
	_c.Call.Return(n)
	return _c
}

func (_c *MockRetryableInterface_RetriesRemaining_Call) RunAndReturn(run func() int) *MockRetryableInterface_RetriesRemaining_Call {
	_c.Call.Return(run)
	return _c
}

// Retry provides a mock function for the type MockRetryableInterface
func (_mock *MockRetryableInterface) Retry(ctx context.Context) (bool, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Retry")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (bool, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRetryableInterface_Retry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Retry'
type MockRetryableInterface_Retry_Call struct {
	*mock.Call
}

// Retry is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockRetryableInterface_Expecter) Retry(ctx interface{}) *MockRetryableInterface_Retry_Call {
	return &MockRetryableInterface_Retry_Call{Call: _e.mock.On("Retry", ctx)}
}

func (_c *MockRetryableInterface_Retry_Call) Run(run func(ctx context.Context)) *MockRetryableInterface_Retry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRetryableInterface_Retry_Call) Return(b bool, err error) *MockRetryableInterface_Retry_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockRetryableInterface_Retry_Call) RunAndReturn(run func(ctx context.Context) (bool, error)) *MockRetryableInterface_Retry_Call {
	_c.Call.Return(run)
	return _c
}
