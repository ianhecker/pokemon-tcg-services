// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"time"

	mock "github.com/stretchr/testify/mock"
)

// NewMockSleepable creates a new instance of MockSleepable. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSleepable(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSleepable {
	mock := &MockSleepable{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSleepable is an autogenerated mock type for the Sleepable type
type MockSleepable struct {
	mock.Mock
}

type MockSleepable_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSleepable) EXPECT() *MockSleepable_Expecter {
	return &MockSleepable_Expecter{mock: &_m.Mock}
}

// Duration provides a mock function for the type MockSleepable
func (_mock *MockSleepable) Duration() time.Duration {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Duration")
	}

	var r0 time.Duration
	if returnFunc, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}
	return r0
}

// MockSleepable_Duration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Duration'
type MockSleepable_Duration_Call struct {
	*mock.Call
}

// Duration is a helper method to define mock.On call
func (_e *MockSleepable_Expecter) Duration() *MockSleepable_Duration_Call {
	return &MockSleepable_Duration_Call{Call: _e.mock.On("Duration")}
}

func (_c *MockSleepable_Duration_Call) Run(run func()) *MockSleepable_Duration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSleepable_Duration_Call) Return(duration time.Duration) *MockSleepable_Duration_Call {
	_c.Call.Return(duration)
	return _c
}

func (_c *MockSleepable_Duration_Call) RunAndReturn(run func() time.Duration) *MockSleepable_Duration_Call {
	_c.Call.Return(run)
	return _c
}

// Sleep provides a mock function for the type MockSleepable
func (_mock *MockSleepable) Sleep() (func() bool, <-chan time.Time) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Sleep")
	}

	var r0 func() bool
	var r1 <-chan time.Time
	if returnFunc, ok := ret.Get(0).(func() (func() bool, <-chan time.Time)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() func() bool); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(func() bool)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() <-chan time.Time); ok {
		r1 = returnFunc()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(<-chan time.Time)
		}
	}
	return r0, r1
}

// MockSleepable_Sleep_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sleep'
type MockSleepable_Sleep_Call struct {
	*mock.Call
}

// Sleep is a helper method to define mock.On call
func (_e *MockSleepable_Expecter) Sleep() *MockSleepable_Sleep_Call {
	return &MockSleepable_Sleep_Call{Call: _e.mock.On("Sleep")}
}

func (_c *MockSleepable_Sleep_Call) Run(run func()) *MockSleepable_Sleep_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSleepable_Sleep_Call) Return(stop func() bool, done <-chan time.Time) *MockSleepable_Sleep_Call {
	_c.Call.Return(stop, done)
	return _c
}

func (_c *MockSleepable_Sleep_Call) RunAndReturn(run func() (func() bool, <-chan time.Time)) *MockSleepable_Sleep_Call {
	_c.Call.Return(run)
	return _c
}
