// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package proxymocks

import (
	"context"

	"github.com/ianhecker/pokemon-tcg-services/internal/networking/proxy"
	mock "github.com/stretchr/testify/mock"
)

// NewMockProxyInterface creates a new instance of MockProxyInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProxyInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProxyInterface {
	mock := &MockProxyInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockProxyInterface is an autogenerated mock type for the ProxyInterface type
type MockProxyInterface struct {
	mock.Mock
}

type MockProxyInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProxyInterface) EXPECT() *MockProxyInterface_Expecter {
	return &MockProxyInterface_Expecter{mock: &_m.Mock}
}

// Do provides a mock function for the type MockProxyInterface
func (_mock *MockProxyInterface) Do(request proxy.Request) proxy.Response {
	ret := _mock.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for Do")
	}

	var r0 proxy.Response
	if returnFunc, ok := ret.Get(0).(func(proxy.Request) proxy.Response); ok {
		r0 = returnFunc(request)
	} else {
		r0 = ret.Get(0).(proxy.Response)
	}
	return r0
}

// MockProxyInterface_Do_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Do'
type MockProxyInterface_Do_Call struct {
	*mock.Call
}

// Do is a helper method to define mock.On call
//   - request proxy.Request
func (_e *MockProxyInterface_Expecter) Do(request interface{}) *MockProxyInterface_Do_Call {
	return &MockProxyInterface_Do_Call{Call: _e.mock.On("Do", request)}
}

func (_c *MockProxyInterface_Do_Call) Run(run func(request proxy.Request)) *MockProxyInterface_Do_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 proxy.Request
		if args[0] != nil {
			arg0 = args[0].(proxy.Request)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockProxyInterface_Do_Call) Return(response proxy.Response) *MockProxyInterface_Do_Call {
	_c.Call.Return(response)
	return _c
}

func (_c *MockProxyInterface_Do_Call) RunAndReturn(run func(request proxy.Request) proxy.Response) *MockProxyInterface_Do_Call {
	_c.Call.Return(run)
	return _c
}

// NewRequest provides a mock function for the type MockProxyInterface
func (_mock *MockProxyInterface) NewRequest(ctx context.Context, method proxy.Method, url string) proxy.Request {
	ret := _mock.Called(ctx, method, url)

	if len(ret) == 0 {
		panic("no return value specified for NewRequest")
	}

	var r0 proxy.Request
	if returnFunc, ok := ret.Get(0).(func(context.Context, proxy.Method, string) proxy.Request); ok {
		r0 = returnFunc(ctx, method, url)
	} else {
		r0 = ret.Get(0).(proxy.Request)
	}
	return r0
}

// MockProxyInterface_NewRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewRequest'
type MockProxyInterface_NewRequest_Call struct {
	*mock.Call
}

// NewRequest is a helper method to define mock.On call
//   - ctx context.Context
//   - method proxy.Method
//   - url string
func (_e *MockProxyInterface_Expecter) NewRequest(ctx interface{}, method interface{}, url interface{}) *MockProxyInterface_NewRequest_Call {
	return &MockProxyInterface_NewRequest_Call{Call: _e.mock.On("NewRequest", ctx, method, url)}
}

func (_c *MockProxyInterface_NewRequest_Call) Run(run func(ctx context.Context, method proxy.Method, url string)) *MockProxyInterface_NewRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 proxy.Method
		if args[1] != nil {
			arg1 = args[1].(proxy.Method)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockProxyInterface_NewRequest_Call) Return(request proxy.Request) *MockProxyInterface_NewRequest_Call {
	_c.Call.Return(request)
	return _c
}

func (_c *MockProxyInterface_NewRequest_Call) RunAndReturn(run func(ctx context.Context, method proxy.Method, url string) proxy.Request) *MockProxyInterface_NewRequest_Call {
	_c.Call.Return(run)
	return _c
}

// SetAuthorization provides a mock function for the type MockProxyInterface
func (_mock *MockProxyInterface) SetAuthorization(request proxy.Request, key string, value string) {
	_mock.Called(request, key, value)
	return
}

// MockProxyInterface_SetAuthorization_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetAuthorization'
type MockProxyInterface_SetAuthorization_Call struct {
	*mock.Call
}

// SetAuthorization is a helper method to define mock.On call
//   - request proxy.Request
//   - key string
//   - value string
func (_e *MockProxyInterface_Expecter) SetAuthorization(request interface{}, key interface{}, value interface{}) *MockProxyInterface_SetAuthorization_Call {
	return &MockProxyInterface_SetAuthorization_Call{Call: _e.mock.On("SetAuthorization", request, key, value)}
}

func (_c *MockProxyInterface_SetAuthorization_Call) Run(run func(request proxy.Request, key string, value string)) *MockProxyInterface_SetAuthorization_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 proxy.Request
		if args[0] != nil {
			arg0 = args[0].(proxy.Request)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockProxyInterface_SetAuthorization_Call) Return() *MockProxyInterface_SetAuthorization_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockProxyInterface_SetAuthorization_Call) RunAndReturn(run func(request proxy.Request, key string, value string)) *MockProxyInterface_SetAuthorization_Call {
	_c.Run(run)
	return _c
}
